<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: review-io | yaongfeng]]></title>
  <link href="http://yaonphy.github.io/blog/categories/review-io/atom.xml" rel="self"/>
  <link href="http://yaonphy.github.io/"/>
  <updated>2014-05-01T14:44:15+08:00</updated>
  <id>http://yaonphy.github.io/</id>
  <author>
    <name><![CDATA[yaongfeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[review.io.02]]></title>
    <link href="http://yaonphy.github.io/blog/2014/05/01/review-io-me/"/>
    <updated>2014-05-01T08:39:37+08:00</updated>
    <id>http://yaonphy.github.io/blog/2014/05/01/review-io-me</id>
    <content type="html"><![CDATA[<h2><a href="http://nshipster.com/associated-objects/">Associated Object</a><a href="http://nshipster.cn/associated-objects/">&lt;中文_1></a><a href="http://esoftmobile.com/2014/02/18/associated-objects/">&lt;中文_2></a></h2>

<p>``` objc</p>

<h1>import &lt;objc/runtime.h></h1>

<p>```</p>

<p>使用 &lt;objc/runtime.h> 中的方法是有风险的。可以用它里面的方法来实现其它任何方法都无法实现的功能，也可以对系统产生比其它方法更加恶劣的影响。
Associated Objects/Associative References 就是其中的一个主题。其在 Objective-C 2.0 中被引入，适用于 Mac OS X 10.6 Snow Leopard (及iOS4)之后的系统环境。主要包括三个方法：</p>

<p>``` objc</p>

<p>void objc_setAssociatedObject(id object, void <em>key, id value, objc_AssociationPolicy policy);
id objc_getAssociatedObject(id object, void </em>key)
void objc_removeAssociatedObjects(id object);</p>

<p>```</p>

<h4>最主要的一点是，它允许开发者在已经存在的类的 category 中添加自定义的 property。举个栗子：</h4>

<p>``` objc NSObject + AssociatedObject.h</p>

<p>@interface NSObject (AssociatedObject)
@property (nonatomic, strong) id associatedObject;
@end</p>

<p>```</p>

<p>``` objc  NSObject + AssociatedObject.m
@implementation NSObject (AssociatedObject)
@dynamic associatedObject;</p>

<ul>
<li><p>(void)setAssociatedObject:(id)object {
   objc_setAssociatedObject(self, @selector(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);
}</p></li>
<li><p>(id)associatedObject {
  return objc_getAssociatedObject(self, @selector(associatedObject));
}</p></li>
</ul>


<p>```</p>

<p>key 最好是 static char，是一个指针的话更好,必须保证唯一性。</p>

<p>``` objc</p>

<p>static char kAssociatedObjectKey;
objc_getAssociatedObject(self, &amp;kAssociatedObjectKey);</p>

<p>```</p>

<p>用 selector 的话也行，是一种更加简洁的方式。</p>

<blockquote><p>Since SELs are guaranteed to be unique and constant, you can use _cmd as the key for objc_setAssociatedObject(). <a href="https://twitter.com/search?q=%23objective&amp;src=hash">#objective-c</a> <a href="https://twitter.com/search?q=%23snowleopard&amp;src=hash">#snowleopard</a></p>

<p>— Bill Bumgarner (<a href="https://twitter.com/bbum/statuses/3609098005">@bbum</a>) August 28, 2009</p></blockquote>

<h3>AssociationPolicy</h3>

<p>objc_AssociationPolicy 参数指定了 property 以何种方式与对象关联，具体对应关系查看原文列表，或者<a href="file:///Users/yaongfeng/Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleiOS7.1.iOSLibrary.docset/Contents/Resources/Documents/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/objc_setAssociatedObject">官方文档</a>。</p>

<p>需要注意的是，OBJC_ASSOCIATION_ASSIGN 方式关联的 property 和 直接用 weak 修饰的 property 并不完全一样，反而更像 unsafe_unretained 修饰的property。</p>

<blockquote><p>According to the Deallocation Timeline described in <a href="https://developer.apple.com/videos/wwdc/2011/#322-video">WWDC 2011, Session 322 (~36:00)</a>, associated objects are erased surprisingly late in the object lifecycle, in object_dispose(), which is invoked by NSObject -dealloc.</p></blockquote>

<h3>Removing Objects</h3>

<h4>不要直接使用 objc_removeAssociatedObjects() 来移除对象，因为该方法会移除目标对象关联的所有对象。可行的方法是，调用 objc_setAssociatedObject 方法，并传递 nil 为参数。</h4>

<h3>应该这样使用</h3>

<ul>
<li>添加 private variable，以便于实现细节的东西。比如，<a href="https://github.com/AFNetworking/AFNetworking/blob/2.1.0/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.m#L57-L63">AFNetworking 的实现中</a>，为 UIImageView category 关联了一个 AFHTTPRequestOperation 类型的 property，用于异步地从远程服务器下载图片。（用于追踪额外的信息）</li>
<li><p>为 category 添加 public property，以便于扩展。同样，在 <a href="https://github.com/AFNetworking/AFNetworking/blob/2.1.0/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.h#L60-L65">AFNetworking 的实现中</a>,为 UIImageView category 关联了一个 imageResponseSerializer 类型的 property，可以在设置其 UIImage （保存到磁盘）之前，对 UIImage 做一些渲染更改，而是否更改是可选的。</p></li>
<li><p>为 KVO category 创建一个 associated observer。最好用 associated-object 作为 Observer，而不是对象自己 Observer 自己。</p></li>
</ul>


<h3>不要这样使用</h3>

<ul>
<li>如果 associated object 的值仅仅用到一次，那么最好不要用这种方式。</li>
<li>如果 associated object 的值很容易通过其它方式获取到时，没必要这样使用。</li>
<li>使用 associated object 来替代下面的选项时，也最好别用。

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">Subclassing</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/Devpedia-CocoaApp/TargetAction.html">Target-Action</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html">Gesture Recognizers</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/DevPedia-CocoaCore/Delegation.html">Delegation</a></li>
<li><a href="http://nshipster.com/nsnotification-and-nsnotificationcenter/">NSNoification&amp;NSNotificationCenter</a></li>
</ul>
</li>
</ul>


<h4>category 一般也不会成为最先考虑的技术，associated object 最好在别无选择时使用。一些 hack 形式的技术，很多人往往急着拿来一试身手。这样不好，最好先对其进行深入透彻的了解，再在合适的地方运用。</h4>

<hr />

<h1>#</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[review.io.01]]></title>
    <link href="http://yaonphy.github.io/blog/2014/04/29/review-io-me/"/>
    <updated>2014-04-29T14:49:13+08:00</updated>
    <id>http://yaonphy.github.io/blog/2014/04/29/review-io-me</id>
    <content type="html"><![CDATA[<h3>review.io 标签</h3>

<p>社交网络的发展使得各种信息以井喷状流窜，关注最新的技术流向能够让自己的技术血液保鲜。从泛滥的信息中甄选出精华的部分吸收掉，不但能快速的提升自己，还能在潜意识中帮助自己做出正确的抉择。所以，沉下心来掌握一些有价值的、适合自己的最新技术才应该是一个务实者所应该做的，而不是以烦躁的心态仅仅浏览下最新的技术文章。除了需要从最便捷的渠道第一时间捕获到最新的信息，还要付诸以极强的执行力，将其真正变成自己的实践积累。</p>

<hr />

<h2><a href="http://nshipster.com/empathy/">Empathy</a>&lt;<a href="http://nshipster.com/empathy/">中文</a>></h2>

<p>Empathy 的语意应该是，换个角度看待事物。这是 Mattt Thompson 写的一篇随笔，非技术类。</p>

<h3>关于产品</h3>

<p>好的软件产品应该恰如其分的瘙到用户的痒处；对产品追求极致，可以带给你敏锐的洞察力，以及坚韧不拔的意志力。</p>

<h3>分享，自由，包容，耐心</h3>

<p>人的本性是乐于和他人分享的，甚至不求回报。无论是在线上还是线下，与他人交流时，别太偏激，要有耐心，要学会变换角度。作为一名 programmer ，或者网络社区中的一员，更应该这样。如果有人用英文和你交流有困难，你应该用简洁、清晰的语句来和他对话。一名好的程序员应该时刻都懂得从不同的角度来看待问题。</p>

<hr />

<h2><a href="http://nshipster.com/nstemporarydirectory/">NSTemporary​Directory / NSItem​Replacement​Directory / mktemp(3)</a>&lt;<a href="http://nshipster.cn/nstemporarydirectory/">中文</a>></h2>

<p>磁盘是用来存放需要长久保留的数据的，对于临时数据（文件），就不能这样了。临时文件实际上是将缓冲区里的数据写入磁盘中（某个角落里），然后通过某种方式来使用，再然后被删除掉。使用临时文件的过程可以归纳为：找到文件系统的一个合适位置来存放 &mdash;> 取一个唯一的名字 &mdash;> 不再使用时删除。</p>

<h3>寻找一个适合的系统目录</h3>

<p>临时文件不应该存放在会被 Time Machine 备份，或者被 iCloud 同步的目录下。在 Unix 系统中，/tmp 目录确实是可以用来存放临时文件的，但是现在的 iOS 和 Mac OS X 应用中都采用了沙盒机制，其 NSTemporaryDirectory 专门设计为存放临时文件。</p>

<p>苹果推荐使用基于 NSURL 的 APIs 来进行文件操作，而放弃老的基于 NSString APIs 的方式。实际情况是，这种转换进行的并不顺畅。比如 NSFileManager 中的
URLForDirectory:inDomain:appropriateForURL:create:error: 方法：</p>

<p>``` objc
&ndash; (NSURL <em>)URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL </em>)url create:(BOOL)shouldCreate error:(NSError **)error
{</p>

<pre><code>...
</code></pre>

<p>}
```
将 NSItemReplacementDirectory 作为 directory 参数，NSUserDomainMask 作为 domain 参数，一个有效的父目录作为 url 参数，可以返回一个创建好的目录地址。但是 Mattt 觉得很难弄明白如何使用它。他认为，这个方法似乎是为了配合 replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error: 方法，来移动临时文件用的。</p>

<h4>干脆直接用下面的方式：</h4>

<p><code>objc
[NSURL fileURLWithPath:NSTemporaryDirectory() isDirectory:YES];
</code></p>

<h3>生成唯一的文件名/目录名</h3>

<p>取的名字一定要具备唯一性。创建一个唯一标识符的方式是：</p>

<p>``` objc
//return a string in the format: 5BD255F4-CA55-4B82-A555-0F4BC5CA2AD6-479-0000018E14D059CC</p>

<p>NSString *identifier = [[NSProcessInfo processInfo] globallyUniqueString];</p>

<p>```</p>

<div class="alert alert-info">
<p>
    <span class="glyphicon glyphicon-info-sign"></span>
   有人建议直接调用系统的 mktemp(3) 方法来防止命名冲突，但是上述方法不大可能会出现命名冲突。
</div>


<p>使用如下方式也可以：</p>

<p>``` objc
//This produces a string in the format: 22361D15-E17B-4C48-AEA6-C73BBEA17011</p>

<p>[[NSUUID UUID] UUIDString]
```</p>

<h4>然后创建临时文件的路径：</h4>

<p><code>objc
NSString *fileName = [NSString stringWithFormat:@"%@_%@", [[NSProcessInfo processInfo] globallyUniqueString], @"file.txt"];
NSURL *fileURL = [NSURL fileURLWithPath:[NSTemporaryDirectory() stringByAppendingPathComponent:fileName]];
</code></p>

<h4>如何创建一个临时子目录：（便于一次性操作多个临时文件）</h4>

<p><code>objc
NSURL *directoryURL = [NSURL fileURLWithPath:[NSTemporaryDirectory() stringByAppendingPathComponent:[[NSProcessInfo processInfo] globallyUniqueString]] isDirectory:YES];
[[NSFileManager defaultManager] createDirectoryAtURL:directoryURL withIntermediateDirectories:YES attributes:nil error:&amp;error];
</code></p>

<p>获取该临时子目录下的文件路径：</p>

<p><code>objc
NSURL *fileURL = [directoryURL URLByAppendingPathComponent:fileName];
</code></p>

<h3>向临时文件中写入数据</h3>

<h4>最直接的方式：</h4>

<p><code>objc
NSData *data = ...;
NSError *error = nil;
[data writeToURL:fileURL options:NSDataWritingAtomic error:&amp;error];
</code></p>

<p>另一种方式：
<code>objc
NSOutputStream *outputStream = [NSOutputStream outputStreamToFileAtPath:[fileURL absoluteString] append:NO];
</code></p>

<h3>清除临时文件</h3>

<p>在 Mattt 写该文时，并没有相关的资料明确指出，系统过多长的时间会自动的清理系统临时目录下的文件。但是自己来维护绝对是好习惯。
下面的方式，对于删除临时目录和临时文件，都是可行的</p>

<p><code>objc
NSError *error = nil;
[[NSFileManager defaultManager] removeItemAtURL:fileURL error:&amp;error];
</code></p>

<h3>感悟</h3>

<p>在一个应用程序的整个生命周期中，其实一切东西都是临时的，一些东西只是比另一些东西存在的时间更长一些。</p>

<p><blockquote><p>一切都会过去的（This too shall pass）</p></blockquote></p>

<p>我们短暂而辉煌的生命也是这个道理啊。</p>

<hr />

<h2>电子书网站</h2>

<p>临时收集三个电子书收集站点：</p>

<ul>
<li><a href="http://www.it-ebooks.info">www.it-ebooks.info</a></li>
<li><a href="http://www.salttiger.com">www.salttiger.com</a></li>
<li><a href="http://www.ppurl.com">www.ppurl.com</a></li>
</ul>


<p>之后，又发现 <a href="http://www.zhihu.com/question/19734795?rf=19620112">合法地免费下载电子书的站点有哪些推荐?</a> 罗列的更加全面！！</p>

<hr />

<h2>Octopress 中点击链接之后，跳转到新打开的页面。</h2>

<p>可以在 Octopress根目录/source/_includes/custom/head.html 文件中加入如下代码</p>

<p>``` html</p>

<script language = "JavaScript">
function addBlankTargetForLinks () {
  $('a[href^="http"]').each(function(){
        $(this).attr('target', '_blank');
    });
}
 
$(document).bind('DOMNodeInserted', function(event) {
    addBlankTargetForLinks();
});
</script>


<p>```
也可直接使用 HTML 的标签</p>

<p>``` html</p>

<pre><code>&lt;a href="http://newPage.html" target="_blank"&gt;new page&lt;/a&gt;
</code></pre>

<p>```</p>

<h4>经过测试，在本地 rake preview 模式下，以及 deploy 之后，上述两种跳转方式都无效。</h4>

<hr />

<h2><a href="http://nshipster.com/nscache/">NSCache(|kæʃ|)</a><a href="http://nshipster.cn/nscache/">中文</a></h2>

<p>NSCache 被很多开发者忽略了。它和 NSMutableDictionary 一样，都具有垃圾回收功能。唯一不同于 NSMutableDictionary 的是，NSCache 中保存的 keys 并不是复制的，这反而成了它的一个优势。
NSCache 可以说是一个烫手的山芋。为什么呢？
其 setObject:forKey:cost: 方法和 NSMutableDictionary 的 setObject:forKey: 很相似，只是多了一个 cost 参数。</p>

<blockquote><p>官方文档中说，const 值用来衡量 Cache 中的所有对象所要消耗的资源。
当内存不足，或者该值超出最大允许范围之后，Cache 将开始清理一些无用的元素。</p></blockquote>

<div class="alert alert-info">
<p>
    <span class="glyphicon glyphicon-info-sign"></span>
   但是，清理的过程并不能确保按照确定的顺序进行。所以，当你想通过控制 cost 参数来进行某些特殊操作时，结果可能不是你想要的。
   最直观的 const 值应该是所占的字节数，如果不能很容易的读取到的话，也就没必要花太多功夫去计算了。这时可以传 0 ，或者选用 setObject:forKey: 方法。
   使用 evictsObjectsWithDiscardedContent 和 NSDiscardableContent 来控制自动回收，也许同样会出现问题。
</div>


<p>总之，Mattt 认为，如果你不认识苹果内部写这些方法的人的话，最好别用它们了。</p>

<h4>尽管如此，大家应该更多的使用 NSCache 来实现缓存处理，但是要用下面的这些不烫手的方法：</h4>

<ul>
<li>objectForKey:</li>
<li>setObject:forKey</li>
<li>removeObjectForKey:</li>
</ul>

]]></content>
  </entry>
  
</feed>
