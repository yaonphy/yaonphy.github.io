<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CocoaPods | yaongfeng]]></title>
  <link href="http://yaonphy.github.io/blog/categories/cocoapods/atom.xml" rel="self"/>
  <link href="http://yaonphy.github.io/"/>
  <updated>2014-04-03T10:42:06+08:00</updated>
  <id>http://yaonphy.github.io/</id>
  <author>
    <name><![CDATA[yaongfeng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 CocoaPods 来模块化一个复杂庞大的 iOS App]]></title>
    <link href="http://yaonphy.github.io/blog/2014/04/02/using-cocoapods-to-modularize-big-app/"/>
    <updated>2014-04-02T18:33:20+08:00</updated>
    <id>http://yaonphy.github.io/blog/2014/04/02/using-cocoapods-to-modularize-big-app</id>
    <content type="html"><![CDATA[<h4>这是一篇对英文技术文章 <a href="http://dev.hubspot.com/blog/architecting-a-large-ios-app-with-cocoapods">Using CocoaPods to Modularize a Big iOS App</a>的简体中文翻译，仅供学习交流。</h4>

<h4>原作者：<a href="http://dev.hubspot.com/blog/author/anthony-roldan">Anthony Roldan</a></h4>

<p>为你的移动 App 选择正确的架构确实是一个大问题。架构会影响你个日常开发流程，决定了你在开发中可能遇到的问题，可以让你变得富可敌国，也可以让你变得穷困潦倒。</p>

<p> HubSpot 的移动端 App 功能非常的丰富。它是一个分析统计 App，也是一个社交媒体 App，还是一个邮件 App，还是一个联系人管理类 App（多对一），所有的这些都同处于一个屋檐下。去年夏天，当我们计划开发这个相当复杂的 App 时，我们知道我们必须有一个与其规模相符合的架构。</p>

<p> 我们最终把每一个 sub-app 当作一个完全独立的 App 来开发，然后用 <a href="http://cocoapods.org/">CocoaPods</a> 来将它们集成到 main App 当中。</p>

<p> 从下面的截图中，你可以看到，Sources, Dashboard, Social Media 这些 sub-app 都是独立的 iPhone App，同时它们又是 main App 中的组成模块。</p>

<p> (<a href="http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png?t=1396302307000">http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png?t=1396302307000</a>)
 (<a href="http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png?t=1396302307000">http://cdn2.hubspot.net/hub/51294/file-435767237-png/app_example.png?t=1396302307000</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[揭开CocoaPods的神秘面纱]]></title>
    <link href="http://yaonphy.github.io/blog/2014/04/02/cocoapods-under-the-hood/"/>
    <updated>2014-04-02T10:32:50+08:00</updated>
    <id>http://yaonphy.github.io/blog/2014/04/02/cocoapods-under-the-hood</id>
    <content type="html"><![CDATA[<p><strong>本文是 objc 系列文章中 <a href="http://www.objc.io/issue-6/cocoapods-under-the-hood.html">Issue#6 BuildTools &mdash; CocoaPods Under The Hood</a> 的中文简体翻译，仅用于学习交流。原作者是 <a href="https://twitter.com/micheletitolo">Michele Titolo</a></strong></p>

<p>CocoaPods用于管理OSX和iOS应用程序中的第三方库。有了CocoaPods，你就可以自定义一种叫做Pods的依赖文件了，并且可以在不同的时间点和不同的开发环境下轻松的管理他们的版本。</p>

<p>CocoaPods的设计理念包括两个方面。首先，在自己的项目中导入第三方代码时可能会出现不少的“坑”。对于Objective-C的新手开发者来说，配置工程文件是一件很让他们抓狂的事情。在手动配置程序构建阶段的选项和连接器参数的过程中，很容易出现人为的错误。CocoaPods能够自动的配置编译器的各种设置选项，简化了所有的配置工作。</p>

<p>其次，使用CocoaPods可以更加容易的发现新的第三方库。但是，这并不是意味着你可以构建一个叫FrankApp的应用，而应用里的每一部分都是别人代码的简单拼凑。也不是说你可以发现能够缩短开发周期并能提升你的应用程序质量的优质代码库。</p>

<hr />

<h2>核心组件</h2>

<p>CocoaPods 实际上是由一些 Ruby Gems 构成的一个 Ruby 应用程序。探索其内部构成最需要关注的 gems 有：<a href="https://github.com/CocoaPods/CocoaPods/">CocoaPods/CocoaPods</a>, <a href="https://github.com/CocoaPods/Core">CocoaPods/Core</a>, <a href="https://github.com/CocoaPods/Xcodeproj">CocoaPods/XCodeproj</a>（是的，CocoaPods 是由依赖管理工具构建成的依赖管理工具）。</p>

<h3>CocoaPods/CocoaPod</h3>

<p>这是使用者直接调用的一个组件。任何时候，你调用一个 pod 命令，它便处于活动状态。它里面囊括了使用 CocoaPods 时用到的所有功能，充分利用其它 gems 来完成任务。</p>

<h3>CocoaPods/Core</h3>

<p>Core gem 提供了对 CocoaPods 中的一些文件的处理操作，主要是 Podfile 和 podspecs 。</p>

<h4>Podfile</h4>

<p>Podfile 是用来定义你想使用的pods的文件。它是可以高度自定义的，你可以根据具体需求，创建相应的pods文件。更多信息，请查看<a href="http://guides.cocoapods.org/syntax/podfile.html">Podfile guide</a> 。</p>

<h4>Podspec</h4>

<p>*.podspec 文件中定义了将某个具体的 pod 添加到工程中时所需的信息。这些信息包括源文件路径，使用到的官方框架，编译器参数，以及该 pod 所依赖的其它 pod 的细信息，等等。</p>

<h3>CocoaPods/Xcodeproj</h3>

<p>这个 gem 用来处理所有工程文件之间的交互操作。它可以创建并修改 <em>.xcodeproj 和 </em>.xcworkspace 文件。它同样可以作为一个独立的 gem 来使用。如果你想通过脚本来轻松的修改工程文件，它可以帮到你。</p>

<hr />

<h2>运行 pod install 命令</h2>

<p>运行 pod install 命令时，进行了很多的操作。在运行该命令时，附加一个 &ndash; -verbose 参数，可以观察到整个内部的详细执行流程。现在，让我们运行 pod install &mdash;verbose 命令，将会出现下面所示的信息：</p>

<p>``` sh  通过 pod install &ndash; &ndash; verbose 命令观察详细执行流程
$ pod install &mdash;verbose</p>

<p>Analyzing dependencies</p>

<p>Updating spec repositories
Updating spec repo &lsquo;master&rsquo;
  $ /usr/bin/git pull
  Already up-to-date.</p>

<p>Finding Podfile changes
  &ndash; AFNetworking
  &ndash; HockeySDK</p>

<p>Resolving dependencies of &lsquo;Podfile&rsquo;
Resolving dependencies for target &lsquo;Pods&rsquo; (iOS 6.0)
  &ndash; AFNetworking (= 1.2.1)
  &ndash; SDWebImage (= 3.2)</p>

<pre><code>- SDWebImage/Core
</code></pre>

<p>Comparing resolved specification to the sandbox manifest
  &ndash; AFNetworking
  &ndash; HockeySDK</p>

<p>Downloading dependencies</p>

<p>&ndash;> Using AFNetworking (1.2.1)</p>

<p>&ndash;> Using HockeySDK (3.0.0)
  &ndash; Running pre install hooks</p>

<pre><code>- HockeySDK
</code></pre>

<p>Generating Pods project
  &ndash; Creating Pods project
  &ndash; Adding source files to Pods project
  &ndash; Adding frameworks to Pods project
  &ndash; Adding libraries to Pods project
  &ndash; Adding resources to Pods project
  &ndash; Linking headers
  &ndash; Installing libraries</p>

<pre><code>- Installing target 'Pods-AFNetworking' iOS 6.0
  - Adding Build files
  - Adding resource bundles to Pods project
  - Generating public xcconfig file at 'Pods/Pods-AFNetworking.xcconfig'
  - Generating private xcconfig file at 'Pods/Pods-AFNetworking-Private.xcconfig'
  - Generating prefix header at 'Pods/Pods-AFNetworking-prefix.pch'
  - Generating dummy source file at 'Pods/Pods-AFNetworking-dummy.m'
- Installing target 'Pods-HockeySDK' iOS 6.0
  - Adding Build files
  - Adding resource bundles to Pods project
  - Generating public xcconfig file at 'Pods/Pods-HockeySDK.xcconfig'
  - Generating private xcconfig file at 'Pods/Pods-HockeySDK-Private.xcconfig'
  - Generating prefix header at 'Pods/Pods-HockeySDK-prefix.pch'
  - Generating dummy source file at 'Pods/Pods-HockeySDK-dummy.m'
- Installing target 'Pods' iOS 6.0
  - Generating xcconfig file at 'Pods/Pods.xcconfig'
  - Generating target environment header at 'Pods/Pods-environment.h'
  - Generating copy resources script at 'Pods/Pods-resources.sh'
  - Generating acknowledgements at 'Pods/Pods-acknowledgements.plist'
  - Generating acknowledgements at 'Pods/Pods-acknowledgements.markdown'
  - Generating dummy source file at 'Pods/Pods-dummy.m'
</code></pre>

<ul>
<li>Running post install hooks</li>
<li>Writing Xcode project file to &lsquo;Pods/Pods.xcodeproj&rsquo;</li>
<li>Writing Lockfile in &lsquo;Podfile.lock&rsquo;</li>
<li>Writing Manifest in &lsquo;Pods/Manifest.lock&rsquo;</li>
</ul>


<p>Integrating client project
```</p>

<p>打印出了很多的信息，但是分解之后，整个流程显得清晰明了。下面，让我们来逐一分析。</p>

<h3>读取 Podfile 文件</h3>

<p>如果你曾经感觉到 Podfile 文件中的语法看起来特别古怪，那是因为你正在写的是 Ruby 。相比其它的可用语言，它是一种更加简单的领域特定语言(DSL：Domain Specific Language)。</p>

<p>因此，安装过程中的第一步应当是搞清楚文件中显示地或者隐式地定义了那些 pods 。通过加载 podspecs ，CocoaPods 检索并建立一个包含所有这些 pods 和 它们的版本的列表。Podspecs 被存放在本地的 ~/.cocoapods 目录下。</p>

<h3>版本和冲突</h3>

<p>CocoaPods 使用由 <a href="http://semver.org/">Semantic Versioning</a> 定义的规则来解决依赖库的版本问题。由于这种冲突解决方案可以依赖于补丁版本间的非大量更改，所以可以更加容易的解决依赖问题。比如说，两个不同的 pods 依赖于两个不同版本的 CocoaLumberjack 。如果其中一个依赖于 2.3.1，而另一个依赖于2.3.3版本，解析器会使用最新的2.3.3版本，因为该版本是向后兼容2.3.1版本的。</p>

<p>但是，这并不总是有效。有很多的库不使用这种依赖规则，使得解决版本和冲突问题变得非常困难。</p>

<p>当然，也有很多手动解决冲突的方式。如果一个库依赖于 CocoaLumberjack 的1.2.5 版本，而另一个依赖于 2.3.1，最终的使用者可以通过设置一个确定的版本来解决冲突。</p>

<h3>下载第三方库源代码</h3>

<p>处理过程的下一步是装载依赖库的源代码。每一个 *.podspec 中都包含一个变量，存放 git 远程资源的地址和 tag 标签。这些信息被SHA(Secure Hash Algorithm)算法处理后，存储在 ~/Library/Caches/CocoaPods 目录下。Core gem 负责创建该目录下的文件。</p>

<p>然后，通过使用 Podfile,.podspec,以及 caches 中的信息，将库源码文件下载到 Pods 目录下面。</p>

<h3>生成 Pods.xcodeproj 文件</h3>

<p>每次运行 Pod install 命令时，一旦检测到 *.xcodeproj 文件内容有更改，Xcodeproj gem 将更新其内容。如果该文件不存在， Xcodeproj gem 将按照默认设置创建该文件。否则，将现有的设置信息加载到内存当中。</p>

<h3>安装第三方库</h3>

<p>当 CocoaPods 添加一个库到工程中时，它除了添加库的源代码之外，还添加了很多其它东西。由于每个库的变动都会影响到它自己的 target ，所以对于每一个库，会被添加一些其它的文件。每一个库的源代码需要的附加文件：</p>

<ul>
<li>一个 *.xcconfig 文件，包含工程构建阶段的设置。</li>
<li>一个私有的 *.xcconfig 文件，将上述文件中的设置与 CocoaPods 的默认设置合并。</li>
<li>prefix.pch 文件，构建阶段所需要的。</li>
<li>dummy.m 文件，同样在构建阶段需要。</li>
</ul>


<p>每一个 Pod Target 中都完成这些工作之后，整个的 Pods Target 便被创建了。它同样添加了上述这些文件，同时还添加了一些其它的。如果哪个库源代码包含一个资源 bundle , 添加该 bundle 到 App’target 的说明信息将被添加到 Pods-Rosources.sh 文件中。同样，有一个 Pods-environment.h 文件，可以用其定义的宏来判断某一个组件是否来自某个 pod 。最后，两个声明文件被创建，一个 plist 文件，一个 markdown 文件，用来帮助使用者确认版权信息。</p>

<h3>写入到磁盘中</h3>

<p>到目前为止，很多工作都是用内存中的对象来完成。为了使工作能够重复进行，我们需要一个文件保存所有的配置信息。因而，Pods.xcodeproj 文件，连同其它两个重要的文件  Podfile.lock 和 Manifest.lock，被保存到磁盘中。</p>

<h4>Podfile.lock</h4>

<p>这是 CocoaPods 创建的最重要的文件之一。它追踪所有需要安装的 pods 的现有版本信息。如果你不确定某个已经安装了的 pod 的版本信息，那就查看该文件吧。如果将该文件添加到版本控制工具的资源文件中(<em>译者注：例如，不将该文件添加到.gitignore中</em>)，有利于团队协作开发的一致性，这也是大家推荐的做法。</p>

<h4>Manifest.lock</h4>

<p>这是 Podfile.lock 文件的一个副本，它在你每次运行 pod install 命令时被创建。如果你从来没有看见过这样的错误 <em>sandbox is not in sync with the Podfile.lock</em>，那是因为这个文件不再和 Podfile.lock 完全一样了。由于 Pods 目录并不总是处于版本控制当中，这是一种确保开发者在运行程序前更新 pods 的方式，否则， App 将会崩溃，或者以另外一种不太明显的方式构建失败。</p>

<h4>xcproj</h4>

<p>如果你按照我们推荐的方式，在你的系统中安装了 <a href="https://github.com/0xced/xcproj">xcproj</a>，它会找到 Pods.xcodeproj 文件，并将其转换成旧的 ASCII 格式的 plist 。为什么呢？对这些文件的写操作将不再支持，而过一段时间后，Xcode 仍然依赖于它。如果不安装 xcproj，你的 Pods.xcodeproj 文件将会被保存为一个XML 格式的 plist 文件，当你打开 Xcode 的时候，它将会被重写，导致大量的文件 diffs 。</p>

<hr />

<h2>完成</h2>

<p>成功运行 pod install 命令之后，很多文件被创建，并添加到你的项目中。这个过程仅仅花费了几秒钟的时间。当然，当然，CocoaPods 所完成的工作，没有它，也是可以完成的。但是，这样的话，花费的就不仅仅是几秒钟的时间了。</p>

<hr />

<h2>BTW: <a href="http://en.wikipedia.org/wiki/Continuous_integration">持续集成</a></h2>

<p>CocoaPods 和持续集成并不冲突。对于不同的工程设置，让工程得以成功构建还是相对容易的。</p>

<h3>具有一个版本控制的 Pods 目录</h3>

<p>如果你用版本控制工具来控制 Pods 目录及其中包含的所有文件。你不需要额外做一些特殊处理来完成持续集成。如果你需要指定一个特定的构建方案，选择正确的构建方案来构建 *.xcworkspace 就可以了。</p>

<h3>没有 Pods 目录</h3>

<p>如果你没有使用版本控制工具来控制你的 Pods 目录，你需要做更多的事儿来促使持续集成能够正确的运行。至少，需要对 Podfile 文件进行版本控制。为了易于使用，建议对 .xcworkspace 和 Podfile.lock 文件同样进行版本控制。同样，建议确保被使用的 Pod 的版本是正确的。</p>

<p>一旦你完成了上述的工作，在持续集成环境下运行 CocoaPods 的关键是，确保 pod install 命令在构建(build)工程之前完成。在大多数集成系统中，比如 Jenkins 或者 Travis 中，你仅仅需要将其设置为一个构建步骤(实际上，Travis 将会自动的完成)。Xcode Bots 发布之后，写作此文之际，我们还没有想出一个流畅的处理过程。但是我们正在努力，一旦有所收获，将立即分享给你们。</p>

<hr />

<h2>结束语</h2>

<p>CocoaPods 简化了 Objective-C 的开发，我们的目标是快速发现和利用优质的第三方开源库，并积极参与开源项目的开发。深入理解隐藏在屏幕下面的技术仅仅帮你开发出更好的 apps，我们已经分析了整个执行流程，从加载 specs 和源代码开始，到创建 .xcodeproj 文件及其所有的组件，再到保存所有文件到磁盘中。所以了，下一次使用CocoaPods 时，运行 pod install &mdash; verbose 命令，然后看看有哪些神奇的事情发生了。</p>

<h3>(本文完)</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods —— 高效管理Xocde工程所依赖的第三方开源库(CocoaPods Guides)]]></title>
    <link href="http://yaonphy.github.io/blog/2014/03/31/cocospods-preliminary/"/>
    <updated>2014-03-31T15:29:06+08:00</updated>
    <id>http://yaonphy.github.io/blog/2014/03/31/cocospods-preliminary</id>
    <content type="html"><![CDATA[<h3>说明</h3>

<p>对于CocoaPods的安装使用，<a href="http://guides.cocoapods.org/">其官方网站</a>中有详细的说明。也有一些中文Blog中的文章，翻译、
总结了CocoaPods的使用技巧。既然有许多现成的学习资源，就没有必要再造轮子，自己闷头搞，这样吃力也没得好可讨。因此本篇文章的目
的是，搜罗并整理相关的资源。</p>

<hr />

<h3><a href="http://guides.cocoapods.org/">cocoapods.org</a></h3>

<p>官方英文教材已经非常的详细和完善了，但是对于英文不是母语，又需要在短时间内将其用于现有项目中的开发者来说，这并不是最佳的选择。
我个人觉得，她适宜在时间比较充裕的时候仔细探究，如若兴趣使然，能力所及，还可以为其贡献源代码。</p>

<p>待细读。。。</p>

<hr />

<h3><a href="http://geeklu.com/2013/06/cocoapods-101/">Cocoapods 101</a></h3>

<p>这篇技术博文介绍了CocoaPods简单使用。简单的介绍了下子CocoaPods的背景之后，比较详细的描述了其安装过程，包括rbenv的安装，ruby
的更新安装。最后通过一个简单的实例，用pod自动导入AFNetwork到项目中。</p>

<p>对于不知道的童靴，这个细节值得关注下：淘宝提供一个国内的<a href="http://ruby.taobao.org/">RubyGems镜像地址</a>,解救深受间接性网络连接失败
困扰的民众（15分钟更新一次）。如若这样，在安装CocoaPods前，需要添加新的Gem源地址，并且删掉默认的源地址。如下</p>

<p>```sh 更改Gem源地址为国内淘宝镜像地址
   $ gem sources &mdash;remove <a href="https://rubygems.org/">https://rubygems.org/</a>
   $ gem sources -a <a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>
   $ gem sources -l   # <strong><em> CURRENT SOURCES </em></strong></p>

<p>   # <a href="http://ruby.taobao.org">http://ruby.taobao.org</a>
   # 请确保只有 ruby.taobao.org</p>

<p>   $ gem install cocoapods
```</p>

<hr />

<h3><a href="http://blog.devtang.com/blog/2012/12/02/use-cocoapod-to-manage-ios-lib-dependency/">使用CocoaPods来做iOS程序的包依赖管理</a></h3>

<p>巧哥的这篇还是比较全面的，从其他语言的代码依赖管理工具引入，用他们团队开发的粉笔网客户端为例，阐释了为什么应该使用CocoaPods,以及其带来的好处。接着描述了CocoaPods的安装过程，用实例说明了如何用其导入<a href="https://github.com/CocoaPods/Specs">CocoaPods/Specs</a>中提供的第三方库。另外，还介绍了pod search命令——根据关键字快速查看相匹配库的信息。当然，甄选优质的同类型库需要咨询使用过的开发者或者跟进一步的实践。文章还提到，为了利于团队协作，不能将Podfile.lock加入.gitignore文件中，如果安装appledoc工具，CocoaPods还可以帮助生成帮助文档。最后，简单的阐释了下子CocoaPods的内部原理。</p>

<hr />

<h3><a href="http://www.iwangke.me/2013/04/18/advanced-cocoapods/">CocoaPods进阶：本地包管理</a></h3>

<p>这篇文章列出了实际使用过程中遇到的两个问题，之后依次通过实例，细致的描述了相应的解决方案。对于<a href="https://github.com/CocoaPods/Specs">CocoaPods/Specs</a>中提供的三方库版本更新滞后的问题，可以通过自己创建最新版本的PodSpec来解决。另外，对于不便于公开的代码库，可以通过本地路径来引入。两者的关键都在于创建新的*.podspec文件，并在该文件添加所引用库的路径，之后在Podfile文件中导入新建的podspec。最后还提到weak_frameworks选项的用途。</p>

<hr />

<h3><a href="http://www.objc.io/issue-6/cocoapods-under-the-hood.html">CocoaPods Under The Hood</a></h3>

<p>objc.io 系列的文章真的是太好了，当然这一篇也不例外。BTW，有一篇伯乐在线的译文供参考：<a href="http://blog.jobbole.com/53365/">iOS系列译文：深入理解 CocoaPods</a>。</p>

<hr />

<h3><a href="http://dev.hubspot.com/blog/architecting-a-large-ios-app-with-cocoapods">Using CocoaPods to Modularize a Big iOS App</a></h3>
]]></content>
  </entry>
  
</feed>
